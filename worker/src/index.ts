import { initWasm, Resvg } from "@resvg/resvg-wasm";

import wasm from "./index_bg.wasm";

export interface Env {
}

const letterPaths: Record<string, string> = {
	// should really use a font here - but meh
	"a": "M 4.944 20.832 L 1.104 30.096 L 0 30.096 L 12.576 0 L 13.632 0 L 26.208 30.096 L 25.104 30.096 L 21.264 20.832 L 4.944 20.832 Z M 10.56 7.248 L 5.328 19.872 L 20.88 19.872 L 15.648 7.248 A 19.348 19.348 0 0 1 15.534 6.992 Q 15.261 6.364 14.61 4.81 A 579.069 579.069 0 0 1 14.496 4.536 Q 13.584 2.352 13.104 0.912 Q 12.782 1.88 12.264 3.183 A 83.279 83.279 0 0 1 11.712 4.536 A 498.503 498.503 0 0 1 11.394 5.297 Q 10.806 6.699 10.594 7.173 A 12.116 12.116 0 0 1 10.56 7.248 Z",
	"b": "M 9.84 30.096 L 0 30.096 L 0 0 L 9.792 0 Q 13.762 0 15.833 1.062 A 5.081 5.081 0 0 1 16.656 1.584 Q 18.672 3.168 18.672 7.104 A 11.893 11.893 0 0 1 18.53 9.004 Q 18.366 10.014 18.014 10.828 A 5.582 5.582 0 0 1 17.352 11.976 A 5.189 5.189 0 0 1 14.948 13.726 A 7.623 7.623 0 0 1 13.392 14.112 A 9.15 9.15 0 0 1 15.398 14.442 Q 17.171 14.957 18.264 16.224 Q 19.661 17.844 19.88 20.592 A 13.343 13.343 0 0 1 19.92 21.648 A 14.528 14.528 0 0 1 19.754 23.927 Q 19.561 25.137 19.145 26.084 A 5.505 5.505 0 0 1 17.568 28.2 A 6.911 6.911 0 0 1 15.594 29.28 Q 13.686 29.98 10.821 30.079 A 28.148 28.148 0 0 1 9.84 30.096 Z M 9.84 14.784 L 1.008 14.784 L 1.008 29.136 L 9.84 29.136 Q 14.832 29.136 16.872 27.504 A 4.714 4.714 0 0 0 18.262 25.591 Q 18.902 24.056 18.912 21.72 A 17.369 17.369 0 0 0 18.912 21.648 A 11.565 11.565 0 0 0 18.768 19.752 Q 18.606 18.782 18.263 18.026 A 4.336 4.336 0 0 0 16.872 16.272 A 5.917 5.917 0 0 0 15.309 15.487 Q 13.728 14.942 11.308 14.819 A 29.136 29.136 0 0 0 9.84 14.784 Z M 9.84 0.96 L 1.008 0.96 L 1.008 13.824 L 9.84 13.824 Q 13.62 13.824 15.488 12.516 A 4.581 4.581 0 0 0 15.816 12.264 Q 17.318 10.997 17.599 8.446 A 11.368 11.368 0 0 0 17.664 7.2 A 11.399 11.399 0 0 0 17.546 5.492 Q 17.226 3.39 16.044 2.391 A 3.42 3.42 0 0 0 15.936 2.304 A 4.857 4.857 0 0 0 14.598 1.595 Q 12.843 0.96 9.84 0.96 Z",
	"c": "M 20.832 28.032 L 20.832 28.992 A 34.405 34.405 0 0 1 18.821 29.743 Q 17.859 30.067 16.992 30.282 A 17.828 17.828 0 0 1 16.224 30.456 Q 14.208 30.864 12.144 30.864 Q 8.109 30.864 5.495 29.479 A 8.214 8.214 0 0 1 2.808 27.24 A 10.808 10.808 0 0 1 1.21 24.207 Q 0.171 21.276 0.024 16.89 A 44.37 44.37 0 0 1 0 15.408 A 32.126 32.126 0 0 1 0.249 11.262 Q 0.85 6.66 2.902 4.019 A 9.368 9.368 0 0 1 3.144 3.72 A 9.7 9.7 0 0 1 7.521 0.817 Q 9.144 0.262 11.14 0.084 A 22.13 22.13 0 0 1 13.104 0 Q 15.312 0 17.04 0.096 Q 18.768 0.192 20.16 0.432 L 20.16 1.44 Q 18.432 1.2 16.728 1.08 Q 15.024 0.96 13.104 0.96 Q 6.672 0.96 3.84 4.392 Q 1.187 7.608 1.02 14.468 A 38.56 38.56 0 0 0 1.008 15.408 Q 1.008 21.806 2.629 25.161 A 8.193 8.193 0 0 0 3.552 26.664 A 7.421 7.421 0 0 0 6.642 28.921 Q 9.029 29.904 12.624 29.904 Q 14.64 29.904 16.752 29.424 Q 18.864 28.944 20.832 28.032 Z",
	"d": "M 7.152 30.096 L 0 30.096 L 0 0 L 7.152 0 Q 11.695 0 14.402 0.694 A 13.431 13.431 0 0 1 14.592 0.744 A 11.092 11.092 0 0 1 16.695 1.538 A 7.938 7.938 0 0 1 18.912 3.168 Q 20.496 4.8 21.216 7.656 Q 21.705 9.597 21.862 12.303 A 47.17 47.17 0 0 1 21.936 15.024 A 27.799 27.799 0 0 1 21.659 19.093 Q 21.343 21.219 20.669 22.915 A 10.77 10.77 0 0 1 18.432 26.472 A 10.472 10.472 0 0 1 14.548 28.949 Q 11.526 30.096 7.152 30.096 Z M 7.152 0.96 L 1.008 0.96 L 1.008 29.136 L 7.152 29.136 A 25.177 25.177 0 0 0 10.935 28.872 Q 15.359 28.198 17.688 25.8 Q 20.899 22.494 20.928 15.157 A 33.929 33.929 0 0 0 20.928 15.024 Q 20.928 12.221 20.639 10.12 A 18.289 18.289 0 0 0 20.256 8.112 A 12.125 12.125 0 0 0 19.614 6.218 Q 19.152 5.168 18.516 4.367 A 6.942 6.942 0 0 0 18.144 3.936 A 7.463 7.463 0 0 0 15.996 2.368 A 10.408 10.408 0 0 0 14.088 1.656 A 16.496 16.496 0 0 0 12.159 1.267 Q 10.119 0.97 7.335 0.96 A 54.109 54.109 0 0 0 7.152 0.96 Z",
	"e": "M 1.008 29.136 L 19.296 29.136 L 19.296 30.096 L 0 30.096 L 0 0 L 18.864 0 L 18.864 0.96 L 1.008 0.96 L 1.008 14.112 L 17.088 14.112 L 17.088 15.072 L 1.008 15.072 L 1.008 29.136 Z",
	"f": "M 16.608 16.272 L 1.008 16.272 L 1.008 30.096 L 0 30.096 L 0 0 L 18.384 0 L 18.384 0.96 L 1.008 0.96 L 1.008 15.312 L 16.608 15.312 L 16.608 16.272 Z",
	"g": "M 22.56 28.368 L 22.56 16.896 L 12.384 16.896 L 12.384 15.936 L 23.568 15.936 L 23.568 29.04 Q 22.224 29.664 18.768 30.264 A 43.685 43.685 0 0 1 15.567 30.704 Q 13.966 30.862 12.526 30.864 A 26.906 26.906 0 0 1 12.48 30.864 A 23.362 23.362 0 0 1 9.111 30.639 Q 5.065 30.047 3.051 27.899 A 6.749 6.749 0 0 1 2.688 27.48 Q 0 24.096 0 15.504 A 29.977 29.977 0 0 1 0.283 11.24 Q 0.591 9.098 1.237 7.373 A 11.647 11.647 0 0 1 3.288 3.816 Q 6.576 0 13.44 0 Q 15.6 0 17.856 0.12 Q 20.112 0.24 21.936 0.48 L 21.936 1.44 A 45.078 45.078 0 0 0 20.002 1.23 Q 18.991 1.142 17.868 1.082 A 73.581 73.581 0 0 0 17.832 1.08 Q 15.552 0.96 13.44 0.96 A 18.663 18.663 0 0 0 9.924 1.269 Q 6.118 2 4.008 4.464 A 10.628 10.628 0 0 0 2.124 7.812 Q 1.008 10.908 1.008 15.504 Q 1.008 18.337 1.257 20.486 A 24.009 24.009 0 0 0 1.488 22.056 Q 1.968 24.672 3.024 26.304 A 6.899 6.899 0 0 0 6.393 29.004 A 8.509 8.509 0 0 0 6.552 29.064 A 11.056 11.056 0 0 0 8.248 29.525 Q 10.042 29.876 12.551 29.902 A 39.219 39.219 0 0 0 12.96 29.904 A 26.159 26.159 0 0 0 15.001 29.819 Q 16.073 29.734 17.277 29.567 A 49.573 49.573 0 0 0 18.24 29.424 Q 20.59 29.051 21.896 28.62 A 7.195 7.195 0 0 0 22.56 28.368 Z",
	"h": "M 1.008 15.312 L 1.008 30.096 L 0 30.096 L 0 0 L 1.008 0 L 1.008 14.352 L 21.552 14.352 L 21.552 0 L 22.56 0 L 22.56 30.096 L 21.552 30.096 L 21.552 15.312 L 1.008 15.312 Z",
	"i": "M 0 0 L 1.008 0 L 1.008 30.096 L 0 30.096 L 0 0 Z",
	"j": "M 14.88 19.344 L 14.88 0 L 15.888 0 L 15.888 19.344 A 20.621 20.621 0 0 1 15.681 22.37 Q 15.173 25.785 13.416 27.696 Q 11.415 29.872 7.573 30.287 A 17.819 17.819 0 0 1 5.664 30.384 A 29.369 29.369 0 0 1 3.858 30.331 A 22.949 22.949 0 0 1 2.568 30.216 A 14.417 14.417 0 0 1 1.068 29.961 A 11.322 11.322 0 0 1 0 29.664 L 0 28.704 A 13.843 13.843 0 0 0 2.19 29.208 A 15.537 15.537 0 0 0 2.544 29.256 Q 3.888 29.424 5.424 29.424 A 16.584 16.584 0 0 0 8.014 29.236 Q 9.363 29.022 10.43 28.565 A 6.521 6.521 0 0 0 12.648 27.048 A 7.031 7.031 0 0 0 14.072 24.686 Q 14.83 22.683 14.877 19.74 A 24.652 24.652 0 0 0 14.88 19.344 Z",
	"k": "M 21.216 0 L 7.632 14.784 L 21.792 30.096 L 20.304 30.096 L 6.672 15.312 L 1.008 15.312 L 1.008 30.096 L 0 30.096 L 0 0 L 1.008 0 L 1.008 14.352 L 6.672 14.352 L 19.776 0 L 21.216 0 Z",
	"l": "M 1.008 29.136 L 17.76 29.136 L 17.76 30.096 L 0 30.096 L 0 0 L 1.008 0 L 1.008 29.136 Z",
	"m": "M 25.248 0 L 26.736 0 L 26.736 30.096 L 25.728 30.096 L 25.728 1.2 L 13.968 23.856 L 12.768 23.856 L 1.008 1.152 L 1.008 30.096 L 0 30.096 L 0 0 L 1.488 0 L 13.392 22.752 L 25.248 0 Z",
	"n": "M 22.368 0 L 23.376 0 L 23.376 30.096 L 21.936 30.096 L 1.008 1.152 L 1.008 30.096 L 0 30.096 L 0 0 L 1.44 0 L 22.368 28.944 L 22.368 0 Z",
	"o": "M 22.56 27.216 A 9.066 9.066 0 0 0 23.103 26.475 Q 25.536 22.786 25.536 15.408 Q 25.536 12.794 25.329 10.735 A 25.835 25.835 0 0 0 25.008 8.472 Q 24.726 6.995 24.265 5.8 A 10.09 10.09 0 0 0 23.328 3.936 A 7.444 7.444 0 0 0 22.054 2.445 A 8.025 8.025 0 0 0 19.536 0.936 Q 17.853 0.293 15.308 0.092 A 31.738 31.738 0 0 0 12.816 0 A 21.98 21.98 0 0 0 10.542 0.112 Q 8.619 0.313 7.07 0.87 A 9.139 9.139 0 0 0 3 3.648 Q 0 7.296 0 15.408 A 58.155 58.155 0 0 0 0.034 17.441 Q 0.084 18.861 0.207 20.094 A 26.848 26.848 0 0 0 0.528 22.392 Q 1.056 25.2 2.208 26.928 A 7.818 7.818 0 0 0 3.249 28.174 A 8.144 8.144 0 0 0 6.048 29.928 A 9.074 9.074 0 0 0 6.165 29.972 Q 8.598 30.864 12.816 30.864 Q 19.584 30.864 22.56 27.216 Z M 2.928 26.208 Q 4.128 28.176 6.408 29.04 A 10.815 10.815 0 0 0 8.104 29.514 Q 10.043 29.904 12.816 29.904 A 18.608 18.608 0 0 0 16.092 29.636 Q 19.908 28.952 21.84 26.52 A 9.991 9.991 0 0 0 23.371 23.68 Q 24.363 20.937 24.505 16.819 A 41.029 41.029 0 0 0 24.528 15.408 A 57.799 57.799 0 0 0 24.474 12.834 Q 24.423 11.683 24.322 10.683 A 25.35 25.35 0 0 0 24.072 8.832 Q 23.723 6.848 23.079 5.426 A 8.682 8.682 0 0 0 22.656 4.608 Q 21.456 2.64 19.224 1.8 A 10.398 10.398 0 0 0 17.639 1.357 Q 15.687 0.96 12.816 0.96 A 19.032 19.032 0 0 0 9.521 1.225 Q 5.671 1.903 3.72 4.32 Q 1.008 7.68 1.008 15.408 Q 1.008 18.276 1.245 20.434 A 25.064 25.064 0 0 0 1.464 22.008 A 16.117 16.117 0 0 0 1.874 23.79 Q 2.133 24.669 2.477 25.389 A 7.752 7.752 0 0 0 2.928 26.208 Z",
	"p": "M 9.696 19.152 L 1.008 19.152 L 1.008 30.096 L 0 30.096 L 0 0 L 9.552 0 A 24.9 24.9 0 0 1 12.512 0.164 Q 15.654 0.541 17.501 1.791 A 6.502 6.502 0 0 1 18.024 2.184 A 6.681 6.681 0 0 1 20.026 5.145 Q 20.428 6.272 20.567 7.667 A 15.655 15.655 0 0 1 20.64 9.216 Q 20.64 12.641 19.399 14.869 A 7.203 7.203 0 0 1 17.952 16.704 A 8.282 8.282 0 0 1 15.11 18.356 Q 13.851 18.804 12.295 19 A 20.84 20.84 0 0 1 9.696 19.152 Z M 9.552 0.96 L 1.008 0.96 L 1.008 18.24 L 9.552 18.24 A 19.31 19.31 0 0 0 12.32 18.056 Q 13.723 17.852 14.847 17.423 A 7.368 7.368 0 0 0 17.184 16.032 Q 19.27 14.15 19.579 10.525 A 15.462 15.462 0 0 0 19.632 9.216 Q 19.632 6.449 18.679 4.655 A 5.671 5.671 0 0 0 17.256 2.904 A 7.072 7.072 0 0 0 15.167 1.758 Q 13.185 1.04 10.221 0.968 A 27.685 27.685 0 0 0 9.552 0.96 Z",
	"q": "M 18.48 30.048 L 23.616 36.72 L 22.32 36.72 L 17.472 30.336 Q 16.512 30.624 15.36 30.744 Q 14.208 30.864 12.816 30.864 Q 8.598 30.864 6.165 29.972 A 9.074 9.074 0 0 1 6.048 29.928 A 8.144 8.144 0 0 1 3.249 28.174 A 7.818 7.818 0 0 1 2.208 26.928 Q 1.056 25.2 0.528 22.392 A 26.848 26.848 0 0 1 0.207 20.094 Q 0.084 18.861 0.034 17.441 A 58.155 58.155 0 0 1 0 15.408 Q 0 7.296 3 3.648 A 9.139 9.139 0 0 1 7.07 0.87 Q 8.619 0.313 10.542 0.112 A 21.98 21.98 0 0 1 12.816 0 A 31.738 31.738 0 0 1 15.308 0.092 Q 17.853 0.293 19.536 0.936 A 8.025 8.025 0 0 1 22.054 2.445 A 7.444 7.444 0 0 1 23.328 3.936 A 10.09 10.09 0 0 1 24.265 5.8 Q 24.726 6.995 25.008 8.472 A 25.835 25.835 0 0 1 25.329 10.735 Q 25.536 12.794 25.536 15.408 Q 25.536 21.648 23.832 25.2 A 9.368 9.368 0 0 1 21.135 28.614 A 9.447 9.447 0 0 1 18.48 30.048 Z M 2.928 26.208 Q 4.128 28.176 6.408 29.04 A 10.815 10.815 0 0 0 8.104 29.514 Q 10.043 29.904 12.816 29.904 A 18.608 18.608 0 0 0 16.092 29.636 Q 19.908 28.952 21.84 26.52 A 9.991 9.991 0 0 0 23.371 23.68 Q 24.363 20.937 24.505 16.819 A 41.029 41.029 0 0 0 24.528 15.408 A 57.799 57.799 0 0 0 24.474 12.834 Q 24.423 11.683 24.322 10.683 A 25.35 25.35 0 0 0 24.072 8.832 Q 23.723 6.848 23.079 5.426 A 8.682 8.682 0 0 0 22.656 4.608 Q 21.456 2.64 19.224 1.8 A 10.398 10.398 0 0 0 17.639 1.357 Q 15.687 0.96 12.816 0.96 A 19.032 19.032 0 0 0 9.521 1.225 Q 5.671 1.903 3.72 4.32 Q 1.008 7.68 1.008 15.408 Q 1.008 18.276 1.245 20.434 A 25.064 25.064 0 0 0 1.464 22.008 A 16.117 16.117 0 0 0 1.874 23.79 Q 2.133 24.669 2.477 25.389 A 7.752 7.752 0 0 0 2.928 26.208 Z",
	"r": "M 9.696 18.192 L 1.008 18.192 L 1.008 30.096 L 0 30.096 L 0 0 L 9.552 0 A 26.332 26.332 0 0 1 12.512 0.155 Q 15.58 0.503 17.414 1.638 A 6.549 6.549 0 0 1 18.024 2.064 A 6.399 6.399 0 0 1 20.13 5.164 Q 20.493 6.258 20.597 7.602 A 14.61 14.61 0 0 1 20.64 8.736 A 13.639 13.639 0 0 1 20.418 11.277 Q 19.979 13.59 18.672 15.12 A 7.592 7.592 0 0 1 15.941 17.113 Q 14.891 17.581 13.604 17.846 A 15.058 15.058 0 0 1 12.72 18 L 21.216 30.096 L 20.016 30.096 L 11.616 18.096 Q 11.187 18.129 10.837 18.151 A 32.592 32.592 0 0 1 10.536 18.168 Q 10.08 18.192 9.696 18.192 Z M 9.552 0.96 L 1.008 0.96 L 1.008 17.28 L 9.552 17.28 Q 14.736 17.28 17.184 15.192 A 6.531 6.531 0 0 0 19.163 12.122 Q 19.632 10.647 19.632 8.736 A 11.403 11.403 0 0 0 19.435 6.542 Q 19.194 5.312 18.655 4.372 A 5.364 5.364 0 0 0 17.28 2.784 Q 14.928 0.96 9.552 0.96 Z",
	"s": "M 13.728 16.608 L 5.328 14.592 Q 3.368 14.111 2.171 13.161 A 5.02 5.02 0 0 1 1.344 12.336 A 5.325 5.325 0 0 1 0.448 10.577 Q 0.217 9.821 0.138 8.913 A 11.394 11.394 0 0 1 0.096 7.92 A 11.311 11.311 0 0 1 0.307 5.657 Q 0.811 3.192 2.52 1.872 Q 4.944 0 10.368 0 A 39.629 39.629 0 0 1 12.746 0.068 A 31.225 31.225 0 0 1 14.448 0.216 A 23.069 23.069 0 0 1 16.108 0.466 Q 16.884 0.613 17.567 0.808 A 13.978 13.978 0 0 1 17.76 0.864 L 17.76 1.824 A 19.063 19.063 0 0 0 16.02 1.426 A 25.412 25.412 0 0 0 14.304 1.176 Q 12.384 0.96 10.368 0.96 A 24.876 24.876 0 0 0 7.918 1.072 Q 5.477 1.314 3.985 2.084 A 5.415 5.415 0 0 0 3.24 2.544 Q 1.422 3.893 1.151 6.806 A 11.542 11.542 0 0 0 1.104 7.872 A 9.228 9.228 0 0 0 1.207 9.298 Q 1.437 10.768 2.184 11.664 A 4.525 4.525 0 0 0 3.295 12.606 Q 4.278 13.214 5.76 13.584 L 14.16 15.648 A 16.923 16.923 0 0 1 15.818 16.129 Q 17.493 16.717 18.414 17.539 A 4.013 4.013 0 0 1 18.816 17.952 Q 19.716 19.025 19.967 20.92 A 12.151 12.151 0 0 1 20.064 22.512 A 14.609 14.609 0 0 1 19.9 24.787 Q 19.446 27.659 17.736 29.016 Q 15.408 30.864 10.08 30.864 Q 7.152 30.864 4.392 30.456 A 30.318 30.318 0 0 1 2.777 30.175 Q 1.956 30.008 1.266 29.81 A 12.112 12.112 0 0 1 0 29.376 L 0 28.416 Q 2.496 29.184 4.968 29.544 A 35.348 35.348 0 0 0 9.915 29.904 A 38.601 38.601 0 0 0 10.08 29.904 Q 14.016 29.904 16.097 28.93 A 5.16 5.16 0 0 0 17.04 28.368 A 4.303 4.303 0 0 0 18.345 26.653 Q 19.056 25.058 19.056 22.464 Q 19.056 19.9 18.051 18.69 A 2.968 2.968 0 0 0 17.952 18.576 A 4.122 4.122 0 0 0 17.079 17.877 Q 15.885 17.139 13.728 16.608 Z",
	"t": "M 0 0 L 24.24 0 L 24.24 0.96 L 12.624 0.96 L 12.624 30.096 L 11.616 30.096 L 11.616 0.96 L 0 0.96 L 0 0 Z",
	"u": "M 21.456 18.672 L 21.456 0 L 22.464 0 L 22.464 18.672 Q 22.464 22.332 21.493 24.8 A 8.237 8.237 0 0 1 19.728 27.6 A 8.255 8.255 0 0 1 16.654 29.527 Q 15.353 30.009 13.74 30.22 A 20.879 20.879 0 0 1 11.04 30.384 Q 7.442 30.384 5.054 29.27 A 7.791 7.791 0 0 1 2.664 27.576 Q 0.727 25.534 0.199 21.754 A 22.316 22.316 0 0 1 0 18.672 L 0 0 L 1.008 0 L 1.008 18.672 A 22.71 22.71 0 0 0 1.174 21.522 Q 1.633 25.137 3.36 26.952 Q 5.712 29.424 11.04 29.424 A 19.257 19.257 0 0 0 13.9 29.227 Q 15.352 29.008 16.505 28.547 A 7.189 7.189 0 0 0 19.008 26.928 A 7.29 7.29 0 0 0 20.57 24.421 Q 21.401 22.28 21.453 19.101 A 26.251 26.251 0 0 0 21.456 18.672 Z",
	"v": "M 13.152 30.096 L 12.096 30.096 L 0 0 L 1.104 0 L 10.176 22.848 A 15.445 15.445 0 0 0 10.375 23.407 A 18.665 18.665 0 0 0 10.512 23.76 Q 10.659 24.128 10.919 24.748 A 176.764 176.764 0 0 0 11.088 25.152 Q 11.759 26.782 12.071 27.598 A 33.64 33.64 0 0 0 12.072 27.6 Q 12.384 28.416 12.624 29.184 Q 13.053 27.896 13.809 25.974 A 126.035 126.035 0 0 1 13.992 25.512 Q 14.88 23.28 15.072 22.848 L 24.144 0 L 25.248 0 L 13.152 30.096 Z",
	"w": "M 9.792 30.096 L 8.736 30.096 L 0 0 L 1.056 0 L 7.68 22.848 Q 7.864 23.436 8.146 24.488 A 114.396 114.396 0 0 1 8.328 25.176 Q 8.734 26.727 9.305 29.013 A 808.234 808.234 0 0 1 9.312 29.04 Q 9.9 27.092 10.305 25.735 A 524.267 524.267 0 0 0 10.536 24.96 A 201.373 201.373 0 0 1 10.741 24.272 Q 10.969 23.516 11.107 23.083 A 20.77 20.77 0 0 1 11.184 22.848 L 18.864 0 L 19.92 0 L 27.6 22.848 Q 27.792 23.424 28.248 24.96 Q 28.597 26.136 29.129 27.903 A 1659.855 1659.855 0 0 0 29.472 29.04 Q 29.944 27.065 30.301 25.781 A 43.53 43.53 0 0 1 30.384 25.488 Q 30.768 24.144 31.152 22.848 L 37.728 0 L 38.784 0 L 30.048 30.096 L 28.992 30.096 L 21.312 7.584 Q 20.592 5.472 20.16 3.984 Q 19.728 2.496 19.392 1.2 Q 19.056 2.496 18.624 3.984 A 59.245 59.245 0 0 1 18.259 5.188 Q 17.922 6.264 17.472 7.584 L 9.792 30.096 Z",
	"x": "M 22.656 0 L 12.096 14.544 L 23.664 30.096 L 22.416 30.096 L 11.472 15.312 L 1.2 30.096 L 0 30.096 L 10.896 14.592 L 0.336 0 L 1.536 0 L 11.472 13.824 L 21.456 0 L 22.656 0 Z",
	"y": "M 12.624 17.232 L 23.808 0 L 24.912 0 L 13.104 18.192 L 13.104 30.096 L 12.096 30.096 L 12.096 18.192 L 0 0 L 1.104 0 L 12.624 17.232 Z",
	"z": "M 1.2 29.136 L 21.84 29.136 L 21.84 30.096 L 0 30.096 L 0 29.136 L 19.776 0.96 L 1.392 0.96 L 1.392 0 L 20.928 0 L 20.928 0.96 L 1.2 29.136 Z",
}

export default {
	async fetch(
		request: Request,
		env: Env,
		ctx: ExecutionContext
	): Promise<Response> {

		let letters: string[];
		try {
			letters = await request.json<string[]>();
		} catch {
			letters = ["l", "i", "n", "k", "g", "r", "a", "m", "x", "x", "x", "x", "g", "a", "m", "e"];
		}

		const svg = `<?xml version="1.0" standalone="no"?>
		<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
		<svg width="256" height="256" version="1.1" xmlns="http://www.w3.org/2000/svg">
		<rect x="0" y="0" width="256" height="256" fill="#ffffff" stroke="none" />
		<g stroke-linecap="round" fill-rule="evenodd" fill="#000" style="fill:#000">
		${letters.map((tile, idx) => {
			const rowNumber = Math.floor(idx / 4);
			const columnNumber = idx % 4;
			return `
				<circle cx="${32 + (columnNumber * 64)}" cy="${36 + (rowNumber * 64)}" r="28" stroke="grey" fill="none" stroke-width="2" />
				<path transform="translate(${20 + (columnNumber * 64)},${20 + (rowNumber * 64)})" d="${letterPaths[tile]}"/>
				`;
		}).join("\n")}
		</g>
		</svg>`;

		await initWasm(wasm);

		const resvgJS = new Resvg(svg, {
			fitTo: { mode: "width", value: 400 },
		})
		const pngData = resvgJS.render();
		const pngBuffer = pngData.asPng();

		return new Response(pngBuffer, {
			headers: {
				'Content-Type': 'image/png',
				'Cache-Control': 'no-store'
			}
		});
	},
};
